require("dotenv").config();
const puppeteer = require("puppeteer-extra");
const Stealth = require("puppeteer-extra-plugin-stealth");
puppeteer.use(Stealth());
const supabase = require("../utils/supabase");

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

async function scrapeProspleSearch(searchUrl) {
  console.log("Fetching existing jobs from Supabase...");

  const { data: existingJobs, error: fetchError } = await supabase
    .from("jobs")
    .select("url");

  if (fetchError) {
    console.error("Error fetching existing jobs:", fetchError.message);
    return;
  }

  const existingUrls = new Set(existingJobs.map((job) => job.url));
  console.log(`Fetched ${existingUrls.size} existing jobs from Supabase.`);

  const browser = await puppeteer.launch({
    headless: false,
    args: [
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-blink-features=AutomationControlled",
    ],
    defaultViewport: null,
  });

  const page = await browser.newPage();
  await page.goto(searchUrl, { waitUntil: "networkidle2" });
  console.log("Navigated to Prosple search page.");

  const listSelector = "li.sc-3bbad5b8-1";
  const nextButtonSelector = 'button[aria-label="Goto next page"]';
  const loaderSelector = ".sc-bYutwE";
  const readMoreButtonSelector = 'button[data-event-track="view-all-opportunity-description"]';
  const modalSelector = 'div[role="dialog"][data-state="open"]';
  const modalDescriptionSelector = `${modalSelector} [data-testid="raw-html"]`;

  let pageNum = 1;

  while (true) {
    console.log(`\n--- Scraping Page ${pageNum} ---`);
    await page.waitForSelector(listSelector, { visible: true });

    const jobCount = await page.$$eval(listSelector, (items) => items.length);
    console.log(`Found ${jobCount} job listings on page ${pageNum}.`);

    for (let index = 0; index < jobCount; index++) {
      console.log(`Processing job ${index + 1} of ${jobCount} on page ${pageNum}...`);

      const jobElements = await page.$$(listSelector);
      const job = jobElements[index];

      if (!job) {
        console.warn(`Job at index ${index} not found. Skipping...`);
        continue;
      }

      try {
        await job.hover();
        await job.click();
      } catch (err) {
        console.warn(`Error clicking job ${index + 1}:`, err.message);
        continue;
      }

      // Wait for detail pane to load
      await delay(800);

      // âœ… Click the "Read More" button if present
      const readMoreButton = await page.$(readMoreButtonSelector);
      let fullDescription = "";

      if (readMoreButton) {
        console.log("Opening full description modal...");
        await readMoreButton.click();

        // Wait for modal to appear
        await page.waitForSelector(modalSelector, { visible: true });
        console.log("Modal opened.");

        // Scrape the full description from inside the modal
        fullDescription = await page.$eval(modalDescriptionSelector, (el) => el.innerText.trim());

        // Close the modal
        const closeButton = await page.$(`${modalSelector} button.sc-ljIkKL`);
        if (closeButton) {
          await closeButton.click();
          console.log("Modal closed.");
          await delay(500); // Give it time to disappear
        }
      } else {
        console.log("No 'Read More' button found, using default description.");
      }

      // Extract all other job data (left and right panes)
      const jobData = await page.evaluate(
        (listSelector, index, fullDescription) => {
          const allListItems = document.querySelectorAll(listSelector);
          const li = allListItems[index];
          if (!li) return null;

          const safeText = (el, selector) => el?.querySelector(selector)?.innerText.trim() || "";

          // ----- LEFT PANE -----
          const jobTitleEl = li.querySelector("h2.sc-dOfePm a");
          const companyEl = li.querySelector("p.sc-692f12d5-5");
          const locationEl = li.querySelector("p.sc-692f12d5-15");
          const salaryEl = li.querySelector(".sc-692f12d5-20");
          const startDateEl = li.querySelector(".sc-692f12d5-24 .field-item");
          const closingEl = li.querySelector('[data-testid="badge"] span');

          const roles = Array.from(li.querySelectorAll(".sc-692f12d5-30 span"))
            .map((span) => span.innerText.trim())
            .filter((txt) => txt && !/^\+\d+\s*more$/i.test(txt));


          const summary = {
            title: jobTitleEl?.innerText.trim() || "",
            relativeUrl: jobTitleEl?.getAttribute("href") || "",
            company: companyEl?.innerText.trim() || "",
            location: locationEl?.innerText.trim() || "",
            salary: salaryEl?.innerText.trim() || "",
            startDate: startDateEl?.innerText.trim() || "",
            closingInfo: closingEl?.innerText.trim() || "",
            roles,
          };

          // ----- RIGHT PANE -----
          const benefitLi = Array.from(document.querySelectorAll(".sc-58338662-2 li")).find((li) =>
            li.innerText.includes("Additional benefits")
          );
          const benefits = benefitLi?.querySelector("span.sc-58338662-5")?.innerText || "";

          const deadlineLi = Array.from(document.querySelectorAll(".sc-58338662-2 li")).find((li) =>
            li.innerText.includes("Apply by")
          );
          const deadline =
            deadlineLi?.querySelector("span.sc-58338662-5")?.innerText.replace("Apply by ", "") || "";

          const startDetailLi = Array.from(document.querySelectorAll(".sc-58338662-2 li")).find((li) =>
            li.innerText.includes("Start date")
          );
          const startDateDetail =
            startDetailLi?.querySelector("span.sc-58338662-5")?.innerText.replace("Start date ", "") || "";

          const industry = document.querySelector(".sc-7b9ae07d-7")?.innerText.trim() || "";

          const firstLi = document.querySelector(".sc-58338662-2 li");
          const jobType = firstLi?.querySelector("span.sc-58338662-5")?.innerText || "";

          return {
            ...summary,
            industry,
            description: fullDescription || "",
            benefits,
            deadline,
            startDateDetail,
            jobType,
          };
        },
        listSelector,
        index,
        fullDescription
      );

      if (!jobData) {
        console.warn("Failed to scrape job data. Skipping...");
        continue;
      }

      const fullUrl = "https://uk.prosple.com" + jobData.relativeUrl;

      if (existingUrls.has(fullUrl)) {
        console.log(`Skipping existing job: ${jobData.title}`);
        continue;
      }

    const { data: existingCompany, error: companyFetchError } = await supabase
      .from("companies")
      .select("id, name")
      .eq("name", jobData.company)
      .maybeSingle(); 

      let companyId;

      if (companyFetchError) {
        console.error("Error fetching company:", companyFetchError.message);
        return; // stop this job and continue to the next
      }

      if (existingCompany) {
        companyId = existingCompany.id;
        console.log(`Company found: ${existingCompany.name} (ID: ${companyId})`);
      } else {
        console.log(`Company not found. Inserting: ${jobData.company}`);
      }

      if (!companyId) {
      const { data: insertedCompany, error: insertError } = await supabase
        .from("companies")
        .insert([{ name: jobData.company }])
        .select("id")
        .single();

      if (insertError) {
        console.error("Error inserting new company:", insertError.message);
        return; // stop this job and continue to the next
      }

      companyId = insertedCompany.id;
      console.log(`Inserted new company: ${jobData.company} (ID: ${companyId})`);
    }



      const jobRecord = {
        job_title: jobData.title,
        company_id: companyId,
        deadline: jobData.deadline ? new Date(jobData.deadline) : null,
        start_date: jobData.startDateDetail || jobData.startDate,
        location: jobData.location,
        job_type: jobData.jobType,
        category: jobData.industry,
        description: jobData.description,
        url: fullUrl,
        benefits: jobData.benefits,
      };

      const { error: insertError } = await supabase.from("jobs").insert([jobRecord]);

      if (insertError) {
        console.error("Insert error:", insertError.message);
      } else {
        console.log(`Inserted new job: ${jobRecord.job_title}`);
        existingUrls.add(fullUrl);
      }

      await delay(1200);
    }

    // ----- PAGINATION -----
    const nextButton = await page.$(nextButtonSelector);
    if (!nextButton) {
      console.log("No more pages found. Finished scraping.");
      break;
    }

    console.log(`Moving to page ${pageNum + 1}...`);
    await nextButton.click();

    try {
      await page.waitForSelector(loaderSelector, { visible: true, timeout: 5000 });
      console.log("Loader appeared.");
    } catch {
      console.warn("Loader did not appear, continuing...");
    }

    try {
      await page.waitForSelector(loaderSelector, { hidden: true, timeout: 15000 });
      console.log("Loader finished, next page loaded.");
    } catch {
      console.warn("Loader did not disappear in time, continuing anyway...");
    }

    await page.waitForSelector(listSelector, { visible: true });
    await delay(800);

    pageNum++;
  }

  await browser.close();
  console.log("All pages scraped successfully.");
}

module.exports = { scrapeProspleSearch };
